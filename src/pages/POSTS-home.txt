POSTS EN LA HOME:

<!-- <section>
                <form @submit.prevent="createPost" class="create-post">
                    
                    <div class="post-thumbnail-form">
                        <div class="post-title-form">
                            <label for="title" class="font-bold">Título</label>
                            <input v-model="newPost.title" type="text" placeholder="Escoge un título interesante para tu publicación" required id="title"/>
                        </div>
                        <div class="post-cover-form">
                            
                            <input type="file" @change="handleCoverUpload" accept="image/*" required id="cover" class="file-input"/>
                            <label for="cover"><i class="fa-solid fa-file-image"></i>Portada</label>
                            <div v-if="coverPreview" class="cover-preview">
                                <img :src="coverPreview" alt="Vista previa de la portada" />
                            </div>
                        </div>
                    </div>

                    <div ref="editor" class="quill-editor"></div>

                    <label for="category">Categoría: </label>
                    <select v-model="newPost.category" id="category">
                        <option v-for="cat in categoryList" :key="cat" :value="cat">
                            {{ cat === "Guia" ? "Guía" : cat }}
                        </option>
                    </select>

                    <MainButton>Publicar</MainButton>
                </form>
            </section> -->











            <!-- <div>
                    
                                <img :src="post.cover" class="post-cover" @click="goToPost(post.id)">
                                <div class="post-thumbnail">
                                    
                                    <div class="post-info" @click="goToPost(post.id)">
                                        <span v-if="post.category && categoryStyles[post.category.toLowerCase()]" class="post-category" :style="{ backgroundColor: categoryStyles[post.category.toLowerCase()].color }">
                                            <i :class="['fa', categoryStyles[post.category.toLowerCase()].icon]"></i> {{ post.category === "Guia" ? "Guía" : post.category }}
                                        </span>

                                        <span v-if="post.created_at !== null" class="post-date">{{ formatDate(post.created_at.toDate()) }}</span>
                                    </div>
                                    <p class="post-title" @click="goToPost(post.id)">{{ post.title }}</p>

                                    <div class="post-actions flex">
                                        <button @click.prevent="toggleLike(post.id)" :class="{ liked: isLiked(post.id) }">
                                            <i class="fa-solid fa-up-long" style="color: #de1b1b;"></i> {{ post.likes?.length || 0 }}
                                        </button>
                                        <button @click.prevent="toggleDislike(post.id)" :class="{ disliked: isDisliked(post.id) }">
                                            <i class="fa-solid fa-down-long" style="color: #801414;"></i> {{ post.dislikes?.length || 0 }}
                                        </button>

                                        <button class="comment-counter ml-auto" @click="goToPost(post.id)">
                                            <i class="fa-regular fa-comment" style="color: #000000;"></i> {{ comments[post.id]?.length || 0 }}
                                        </button>
                                    </div>
                                </div>

                            </div> -->


























































                            <script>
import { subscribeToAuth } from '../services/auth';
import PostLoader from '../components/PostLoader.vue';
import { subscribeToPosts, subscribeToComments, getLikesAndDislikes, toggleReaction, categories, categoryStyles, savePost } from '../services/post';
import { uploadFileToStorage } from '../services/storage';
import PostForm from '../components/PostForm.vue';
import PostItem from '../components/PostItem.vue';

export default {
  name: 'Home',
  components: { PostForm, PostLoader, PostItem },
  data() {
    return {
      authUser: {
        id: null,
        email: null,
        photoURL: null,
        displayName: null,
      },
      loadingUser: true,
      posts: [],
      loadingPosts: true,
      comments: {},
      newCommentContent: {},
    };
  },
  computed: {
    categoryList() {
      return categories;
    },
    categoryStyles() {
      return categoryStyles;
    },
  },
  methods: {
    handleCreatePost(postData) {
      // Agrega la información del usuario al post
      postData.user_id = this.authUser.id;
      postData.email = this.authUser.email;
      postData.displayName = this.authUser.displayName;
      // Para Home, communityId es null
      postData.communityId = null;
      postData.photoURL = this.authUser.photoURL;
      savePost(postData)
        .then(() => {
          // Opcional: mostrar mensaje o reiniciar el formulario
        })
        .catch((error) => console.error("Error al crear post:", error));
    },
    handleUploadCover(file, callback) {
      uploadFileToStorage(file, `posts/cover/${file.name}`)
        .then((url) => callback(url))
        .catch((error) => console.error("Error al subir la portada:", error));
    },
    async toggleLike(postId) {
      try {
        await toggleReaction(postId, "like", this.authUser.id);
        this.updatePost(postId);
      } catch (error) {
        console.error("Error al dar like", error);
      }
    },
    async toggleDislike(postId) {
      try {
        await toggleReaction(postId, "dislike", this.authUser.id);
        this.updatePost(postId);
      } catch (error) {
        console.error("Error al dar dislike", error);
      }
    },
    isLiked(postId) {
      const post = this.posts.find(p => p.id === postId);
      return post && post.likes && post.likes.includes(this.authUser.id);
    },
    isDisliked(postId) {
      const post = this.posts.find(p => p.id === postId);
      return post && post.dislikes && post.dislikes.includes(this.authUser.id);
    },
    subscribeToPostComments(postId) {
      if (!this.comments[postId]) {
        this.comments[postId] = [];
      }
      return subscribeToComments(postId, newComments => {
        this.comments[postId] = newComments;
      });
    },
    formatDate(date) {
      return Intl.DateTimeFormat('es-AR', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
      }).format(date).replace(',', '');
    },
    goToPost(postId) {
      this.$router.push(`/post/${postId}`);
    },
    async updatePost(postId) {
      const postIndex = this.posts.findIndex(p => p.id === postId);
      if (postIndex !== -1) {
        this.posts[postIndex] = await getLikesAndDislikes(postId);
      }
    },
  },
  mounted() {
    this.unsubscribeFromAuth = subscribeToAuth(newUserData => {
      this.authUser = newUserData;
      this.loadingUser = false;
    });
    this.unsubscribeFromPosts = subscribeToPosts(newPosts => {
      this.posts = newPosts.filter(post => !post.communityId);
      this.loadingPosts = false;
      newPosts.forEach(post => {
        if (!this.comments[post.id]) {
          this.comments[post.id] = [];
        }
        this.subscribeToPostComments(post.id);
      });
    });
  },
  beforeUnmount() {
    if (this.unsubscribeFromAuth) this.unsubscribeFromAuth();
    if (this.unsubscribeFromPosts) this.unsubscribeFromPosts();
    Object.keys(this.comments).forEach(postId => {
      if (this.comments[postId].unsubscribe) {
        this.comments[postId].unsubscribe();
      }
    });
  },
};
</script>

<template>

        <template v-if="authUser.id === null">
            <div class="content" >

    

<div class="banner">

    <div class="banner-content">
        <div class="banner-1">
            <h1>Bienvenidos a <br/>GamingKingdom</h1>
            <p>Entra en el reino de los videojuegos donde la pasión, la comunidad y la aventura se encuentran. Únete a nosotros para compartir tus experiencias, descubrir nuevos juegos y conectar con jugadores de todo el mundo.</p>
            <div class="banner-cta">
                <a class="login-cta">
                    <router-link to="/iniciar-sesion">Iniciar sesión</router-link>
                </a>
                <a class="register-cta">
                    <router-link to="/registro">Registrarse</router-link>
                </a>
            </div>
        </div>

        <div class="banner-2">
            <img alt="Isologotipo de GamingKingdom" src="../../../public/isotipo.svg" class="banner-img">
        </div>
    </div>
</div>






<section>
    <div class="quienes-somos" id="nosotros">

        <div class="p1">
            <div class="p1-content">
                <p>En GamingKingdom, somos una comunidad apasionada de jugadores que va más allá de solo disfrutar de los videojuegos. Creado por un chico normal al que le gustaba jugar, este foro es un espacio dedicado a conectar a jugadores de todo el mundo, promoviendo la interacción, el aprendizaje y el intercambio de experiencias. Creemos en el poder de los videojuegos para unir a las personas, y nuestro objetivo es crear un entorno inclusivo y acogedor donde todos los jugadores, desde principiantes hasta expertos, puedan sentirse en casa.</p>
            </div>
            <div class="image">
                <img alt="Jefe Maestro" src="../assets/home/home-1.jpg">
                <img alt="Orco de la Horda y soldado de la Alianza luchando" src="../assets/home/home-3.jpg">
            </div>
        </div>
        
        <div class="p2">
            <div class="p2-content">
                <p>Nuestro foro no es solo un lugar para discutir estrategias y compartir logros, sino también una plataforma para descubrir lo inesperado y explorar nuevos horizontes en el mundo de los videojuegos. Vas a tener la posibilidad de interactuar, compartir tus gustos y expresarte libremente. Aquí, cada miembro tiene la oportunidad de contribuir y crecer dentro de una comunidad que valora la creatividad, la camaradería y la pasión por los videojuegos. ¡Únete a nosotros y sé parte de la aventura nuestra familia!</p>

            </div>
            <div class="image">
                <img alt="Ser de Ceniza avivando una hoguera" src="../assets/home/home-2.jpg">
                <img alt="Link escalando una montaña" src="../assets/home/home-4.jpg">
            </div>
        </div>
    </div>
</section>




<section>
    <div class="section-2">
        <div class="section-2-content">
            <div class="section-2-text">
                <h2>Conectate con jugadores alrededor del mundo</h2>
            </div>
            <div class="section-2-image">
                <img src="../assets/home/mapa.png" alt="Ilustración de jugadores conectados alrededor del mundo">
            </div>
        </div>
    </div>
</section>

</div>
        </template>

        <template v-else>
        <div class="m-auto pt-10 pb-20">

            <PostForm
                :initialPostData="{ title: '', content: '', category: 'General', cover: '' }"
                @create-post="handleCreatePost"
                @upload-cover="handleUploadCover"
            />

            <section class="w-[100%]">
                <div class="p-4 w-[95vw] m-auto">
                    <ul v-if="!loadingPosts" class="masonry-gallery">
                        <li v-for="post in posts" :key="post.id" class="item">

                            <PostItem
                                :post="post"
                                :category-styles="categoryStyles"
                                :comments-count="comments[post.id] ? comments[post.id].length : 0"
                                :current-user-id="authUser.id"
                                @go-to-post="goToPost"
                                @toggle-like="toggleLike"
                                @toggle-dislike="toggleDislike"
                            />
                            
                        </li>
                    </ul>
                    <div v-else class="p-4">
                        <PostLoader />
                    </div>
                </div>
            </section>
        </div>
    </template>

</template>