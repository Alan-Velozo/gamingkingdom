<template>
  <header>
    <nav>
      <!-- Logo a la izquierda -->
      <router-link to="/" class="logo-container">
        <img alt="Logo" class="logo" src="./assets/home/logo-negro.png">
      </router-link>

      <template v-if="authUser.id !== null">
      <!-- Buscador en el centro -->
      <div class="search-container">
        <div class="search-box">
          <input 
            type="text" 
            v-model="searchQuery" 
            placeholder="Buscar..." 
            @input="searchCommunities"
          />
          <i class="fa-solid fa-magnifying-glass pr-3" style="color: #000000;"></i>
        </div>
        <ul v-if="searchResults.length > 0" class="search-results">
          <li v-for="community in searchResults" :key="community.id" @click="goToCommunity(community.id)">
            {{ community.name }}
          </li>
        </ul>
      </div>

      <!-- Menú a la derecha -->
      <div class="menu-container">
        <!-- Ícono de hamburguesa para móviles -->
        <input type="checkbox" id="menu-toggle" class="menu-toggle" />
        <label for="menu-toggle" class="hamburger">
          <i class="fa-solid fa-bars"></i>
        </label>

        <!-- Menú principal -->
        <ul id="menu">
          <li>
            <router-link to="/"><i class="fa-solid fa-house"></i></router-link>
          </li>
          
          <li>
            <router-link to="/perfil"><i class="fa-solid fa-circle-user"></i></router-link>
          </li>
          <li>
            <form action="#" @submit.prevent="handleLogout">
              <button class="logout">
                <i class="fa-solid fa-power-off"></i>
              </button>
            </form>
          </li>
        </ul>
      </div>
    </template>
    </nav>
  </header>

  <main>
    <router-view :key="$route.fullPath"/>
  </main>

  <footer v-if="!$route.meta.hideFooter">
    <div class="footer-content">
      <div class="footer-text">
        <p>&copy; GamingKingdom</p>
        <p>Todos los derechos reservados.</p>
      </div>
    </div>
  </footer>
</template>

<script>
import Home from './pages/Home.vue';
import { logout, subscribeToAuth } from './services/auth';
import { searchCommunities } from './services/community';

export default {
  name: 'App',
  components: {Home},
  data() {
      return {
          authUser: { id: null, email: null },
          searchQuery: '',
          searchResults: [],
          showSearch: false, // Estado del popup de búsqueda
      };
  },
  methods: {
      handleLogout() {
          logout();
          this.$router.push({ path: '/iniciar-sesion' });
      },
      toggleSearch() {
          this.showSearch = !this.showSearch;
      },
      async searchCommunities() {
          if (this.searchQuery.trim() === '') {
              this.searchResults = [];
              return;
          }
          try {
              this.searchResults = await searchCommunities(this.searchQuery);
          } catch (error) {
              console.error('Error al buscar:', error);
          }
      },
      goToCommunity(communityId) {
          this.$router.push(`/community/${communityId}`);
          this.searchQuery = '';
          this.searchResults = [];
          this.showSearch = false;
      }
  },
  mounted() {
      subscribeToAuth(newUserData => this.authUser = newUserData);
  },
}
</script>

<style scoped>
/* Estilos del menú */
nav {
  background: black;
  display: flex;
  height: 80px;
  align-items: center;
  position: fixed;
  width: 100%;
  z-index: 999999;
  top: 0;
  padding: 0 1rem;
  justify-content: space-between; /* Distribuye el espacio entre los elementos */
}

.logo-container {
  flex: 1; /* Ocupa el espacio necesario para el logo */
}

nav img {
  max-width: 150px;
}

/* Buscador en el centro */
.search-container {
  flex: 2; /* Ocupa más espacio para centrar el buscador */
  display: flex;
  justify-content: center;
  position: relative;
}

.search-box {
  display: flex;
  align-items: center;
  background: white;
  padding: 5px;
  width: 100%;
  max-width: 600px; 
}

.search-box input {
  border: none;
  outline: none;
  padding: 5px;
  width: 100%;
}

.search-box .search-icon {
  color: black;
  cursor: pointer;
}

.search-results {
  position: absolute;
  top: 40px;
  /* left: 0; */
  background: white;
  border-radius: 5px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
  width: 100%;
  z-index: 1000;
  max-width: 600px; 
}

.search-results li {
  padding: 8px;
  cursor: pointer;
  color: black;
  width: 100%;
}

.search-results li:hover {
  background: #e2e2e2;
  transition-duration: .25s;
  transition-property: background;
}

/* Menú a la derecha */
.menu-container {
  flex: 1; /* Ocupa el espacio necesario para el menú */
  display: flex;
  justify-content: flex-end;
  align-items: center;
}

/* Ícono de hamburguesa (oculto en desktop) */
.menu-toggle {
  display: none;
}

.hamburger {
  display: none;
  cursor: pointer;
  color: white;
  font-size: 1.5rem;
}

/* Menú principal */
ul {
  margin: 0;
  padding: 0;
  display: flex;
  list-style: none;
  align-items: center;
}

ul li {
  cursor: pointer;
}

ul li a, ul li i {
  padding: 0 1rem;
  color: #fff;
  text-decoration: none;
  font-size: 20px;
}

/* ul li a:hover, ul li i:hover {
  text-decoration: underline;
} */

/* Estilos para móviles */
@media (max-width: 1000px) {
  .hamburger {
    display: block;
  }

  .search-container {
    display: none; /* Oculta el buscador en móviles */
  }

  ul {
    position: fixed;
    top: 80px;
    left: 0;
    width: 100%;
    height: calc(100vh - 80px);
    background: black;
    flex-direction: column;
    align-items: center;
    justify-content: flex-start;
    gap: 20px;
    transform: translateX(-100%);
    transition: transform 0.3s ease-in-out;
    padding-top: 20px;
  }

  .menu-toggle:checked ~ ul {
    transform: translateX(0);
  }
}

/* Estilos del footer */
footer {
  background-color: black;
  padding: 3rem;
  z-index: 9999999999999999999;
  position: relative;
}

footer .footer-content .footer-text {
  color: white;
  text-align: center;
  font-size: 1.2rem;
}

footer .footer-content .footer-text p:first-of-type {
  padding-bottom: 3rem;
}

/* Ajustes del main */
main {
  margin-top: 80px;
}
</style>
























































































<template>
  <header>
    <nav>
      <!-- Logo a la izquierda -->
      <router-link to="/" class="logo-container">
        <img alt="Logo" class="logo" src="./assets/home/logo-negro.png">
      </router-link>

      <!-- Buscador en el centro -->
       <template v-if="authUser.id !== null">
        <div class="search-container">
          <div class="search-box">
            <input 
              type="text" 
              v-model="searchQuery" 
              placeholder="Buscar..." 
              @input="search"
            />
            <i class="fa-solid fa-magnifying-glass pr-3" style="color: #000000;"></i>
          </div>
          <ul v-if="searchResults.length > 0" class="search-results">
              <li v-for="result in searchResults" :key="result.id" @click="goToResult(result)">
                  {{ result.type === 'community' ? result.name : result.displayName }}
              </li>
          </ul>
        </div>
      </template>

      <!-- Menú a la derecha -->
      <div class="right-menu">
        <li>
                <div class="notification-icon" @click="toggleNotifications">
                  <i class="fa-solid fa-bell" style="color: white;"></i>
                  <span v-if="unreadNotificationsCount > 0" class="notification-badge">{{ unreadNotificationsCount }}</span>
                </div>
                <div v-if="showNotifications" class="notifications-dropdown">
                  <ul>
                    <li v-for="notification in notifications" :key="notification.id" @click="markAsRead(notification.id)">
                      {{ notification.content }}
                    </li>
                  </ul>
                </div>
              </li>

        <!-- Hamburguesa para móviles -->
        <input type="checkbox" id="mobile-menu-toggle" class="mobile-menu-toggle">
        <label for="mobile-menu-toggle" class="hamburger">
          <i class="fa-solid fa-bars"></i>
        </label>

        <!-- Contenido del menú -->
        <div class="desktop-menu">
          <template v-if="authUser.id !== null">
            <ul class="nav-links">
              <li>
              <router-link to="/"><i class="fa-solid fa-house"></i></router-link>
            </li>
            <li>
              <router-link to="/perfil"><i class="fa-solid fa-circle-user"></i></router-link>
            </li>
            <li>
              <form action="#" @submit.prevent="handleLogout">
                <button class="logout">
                  <i class="fa-solid fa-power-off"></i>
                </button>
              </form>
            </li>
            </ul>
          </template>
          
          <template v-else>
            <div class="auth-buttons">
              <button class="login" @click="$router.push('/iniciar-sesion')">Iniciar sesión</button>
              <button class="signup" @click="$router.push('/registro')">Registrarse</button>
            </div>
          </template>
        </div>

        <!-- Menú móvil -->
        <div class="mobile-menu">
          <ul class="nav-links">
            <template v-if="authUser.id !== null">
              <li><router-link to="/"><i class="fa-solid fa-house"></i> Inicio</router-link></li>
              <li><router-link to="/perfil"><i class="fa-solid fa-circle-user"></i> Perfil</router-link></li>
              <li>
                <form @submit.prevent="handleLogout">
                  <button class="logout"><i class="fa-solid fa-power-off"></i> Cerrar sesión</button>
                </form>
              </li>
            </template>

            <template v-else>
              <li>
                <router-link to="/iniciar-sesion">Iniciar sesión</router-link>
              </li>
              <li>
                <router-link to="/registro">Registrarse</router-link>
              </li>
            </template>
          </ul>
        </div>
      </div>
    </nav>
  </header>

  <main>
    <router-view :key="$route.fullPath"/>
  </main>

  <footer v-if="!$route.meta.hideFooter">
    <div class="footer-content">
      <div class="footer-text">
        <p>&copy; GamingKingdom</p>
        <p>Todos los derechos reservados.</p>
      </div>
    </div>
  </footer>
</template>

<script>
import Home from './pages/Home.vue';
import { logout, subscribeToAuth } from './services/auth';
import { search } from './services/search';
import { subscribeToNotifications, markNotificationAsRead } from './services/notifications';


export default {
  name: 'App',
  components: { Home },
  data() {
      return {
          authUser: { id: null, email: null },
          searchQuery: '',
          searchResults: [],
          showSearch: false,

          showNotifications: false,
          notifications: [],
          unreadNotificationsCount: 0,
      };
  },
  methods: {
      handleLogout() {
          logout();
          this.$router.push({ path: '/iniciar-sesion' });
      },
      toggleSearch() {
          this.showSearch = !this.showSearch;
      },
      async search() {
          if (this.searchQuery.trim() === '') {
              this.searchResults = [];
              return;
          }
          try {
              // Pasar el ID del usuario autenticado a la función de búsqueda
              this.searchResults = await search(this.searchQuery, this.authUser.id);
          } catch (error) {
              console.error('Error al buscar:', error);
          }
      },
      goToResult(result) {
          if (result.type === 'community') {
              this.$router.push(`/community/${result.id}`);
          } else if (result.type === 'user') {
              this.$router.push(`/usuario/${result.id}`);
          }
          this.searchQuery = '';
          this.searchResults = [];
          this.showSearch = false;
      },
      toggleNotifications() {
          this.showNotifications = !this.showNotifications;
      },
      markAsRead(notificationId) {
        const notification = this.notifications.find(n => n.id === notificationId);
        if (notification && !notification.read) {
            markNotificationAsRead(notificationId);

            // Redirigir al chat privado si la notificación tiene un chatId
            if (notification.data && notification.data.chatId) {
                this.$router.push(`/chat/${notification.data.chatId}`);
            }

            // Actualizar el contador de notificaciones no leídas
            this.unreadNotificationsCount = this.notifications.filter(n => !n.read).length;
        }
    },
  },
  // PrivateChat.vue
async mounted() {
    const chatId = this.$route.params.id; // Obtener el ID del chat desde la ruta
    const [userId1, userId2] = chatId.split('_'); // Extraer los IDs de los participantes

    // Determinar el ID del otro usuario
    const otherUserId = userId1 === this.authUser.id ? userId2 : userId1;

    // Obtener los datos del otro usuario
    getUserProfileById(otherUserId).then((user) => {
        this.user = user;
        this.loadingUser = false;
    });

    // Suscribirse a los mensajes del chat
    this.unsubscribeFromMessages = subscribeToPrivateChat(this.authUser.id, otherUserId, newMessages => {
        this.messages = newMessages;
        this.loadingMessages = false;
    });
},
}
</script>

<style scoped>
/* Estilos del navbar */
nav {
  background: black;
  display: flex;
  height: 80px;
  align-items: center;
  position: fixed;
  width: 100%;
  z-index: 999999;
  top: 0;
  padding: 0 2rem;
  justify-content: space-between;
}

.logo-container {
  flex: 0 1 auto;
}

.logo {
  max-width: 150px;
  height: auto;
}

/* Buscador en el centro */
.search-container {
  flex: 1 1 600px;
  max-width: 800px;
  margin: 0 2rem;
  position: relative;
}

.search-box {
  display: flex;
  align-items: center;
  background: white;
  padding: 8px 12px;
}

.search-box input {
  border: none;
  outline: none;
  width: 100%;
  font-size: 14px;
}

/* Menú a la derecha */
.right-menu {
  flex: 0 1 auto;
  display: flex;
  align-items: center;
  gap: 15px;
}

.nav-links {
  display: flex;
  gap: 25px;
  margin: 0;
  padding: 0;
  list-style: none;
}

.nav-links a, .nav-links button {
  color: white;
  font-size: 1.2rem;
  text-decoration: none;
  background: none;
  border: none;
  cursor: pointer;
}

.auth-buttons {
  display: flex;
  gap: 10px;
}

.login, .signup {
  padding: 8px 20px;
  border-radius: 20px;
  font-weight: bold;
  cursor: pointer;
  transition: all 0.2s;
}

.login {
  background: transparent;
  border: 1px solid white;
  color: white;
}

.signup {
  background: #ff4500;
  color: white;
  border: none;
}

.login:hover {
  background: rgba(255, 255, 255, 0.1);
}

.signup:hover {
  background: #e04000;
}

/* Estilos para móviles */
@media (max-width: 1000px) {
  /* .search-container {
    display: none;
  } */
  
  .nav-links {
    gap: 15px;
  }
  
  .auth-buttons {
    gap: 5px;
  }
}

@media (max-width: 690px) {
  .auth-buttons .login, 
  .auth-buttons .signup {
    display: none;
  }
}



































.search-results{
  background: white;
  margin-bottom: -2.5%;
  position: absolute;
  width: 100%;
  outline: 1px solid black;
}

.search-results li{
  padding: 10px;
  cursor: pointer;
}

.search-results li:hover{
  background: rgb(241, 241, 241);
  transition-duration: .25s;
  transition-property: background, font-weight;
  font-weight: bold;
}


/* Añade estos estilos */
.hamburger {
  display: none;
  color: white;
  font-size: 1.5rem;
  cursor: pointer;
}

.mobile-menu-toggle {
  display: none;
}

.mobile-menu {
  display: none;
  position: fixed;
  top: 80px;
  right: -100%;
  background: black;
  width: 250px;
  height: calc(100vh - 80px);
  padding: 20px;
  transition: right 0.3s ease;
}

.mobile-menu-toggle:checked ~ .mobile-menu {
  right: 0;
}

.mobile-menu .nav-links {
  flex-direction: column;
  gap: 15px;
}

.mobile-menu .nav-links a,
.mobile-menu .nav-links button {
  font-size: 1.1rem;
  padding: 10px;
  display: flex;
  align-items: center;
  gap: 10px;
}

/* Media queries */
@media (max-width: 1000px) {
  .hamburger {
    display: block;
  }
  
  .desktop-menu {
    display: none;
  }
  
  .mobile-menu {
    display: block;
  }
  
  /* .search-container {
    display: none;
  } */
}

@media (max-width: 690px) {
  .auth-buttons {
    display: none;
  }
}




main {
  margin-top: 80px;
}






footer {
  background-color: black;
  padding: 3rem;
  z-index: 9999999999999999999;
  position: relative;
}

footer .footer-content .footer-text {
  color: white;
  text-align: center;
  font-size: 1.2rem;
}

footer .footer-content .footer-text p:first-of-type {
  padding-bottom: 3rem;
}

































/* Estilos para el ícono de notificaciones */
.notification-icon {
  position: relative;
  cursor: pointer;
  font-size: 1.4rem;
  bottom: 12px;
}

.notification-badge {
  position: absolute;
  top: -5px;
  right: -5px;
  background-color: red;
  color: white;
  border-radius: 50%;
  padding: 2px 6px;
  font-size: 12px;
}

.notifications-dropdown {
  position: absolute;
  top: 80px;
  right: 0;
  background-color: white;
  border: 1px solid #ccc;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  width: 300px;
  max-height: 400px;
  overflow-y: auto;
  z-index: 1000;
}

.notifications-dropdown ul {
  list-style: none;
  padding: 0;
  margin: 0;
}

.notifications-dropdown li {
  padding: 10px;
  border-bottom: 1px solid #eee;
  cursor: pointer;
}

.notifications-dropdown li:hover {
  background: rgb(241, 241, 241);
  transition-duration: .25s;
  transition-property: background;
}
</style>