import { 
    addDoc, 
    collection, 
    onSnapshot, 
    orderBy, 
    query, 
    updateDoc,
    serverTimestamp, 
    doc as firestoreDoc, 
    getDoc 
} from "firebase/firestore"; 
import { db } from "./firebase";
import { uploadFileToStorage } from "./storage"; // Función que sube archivos a Firebase Storage

export const categories = ["Encuesta", "Arte", "Pregunta", "Guia", "General", "Social"];


// Función para guardar publicaciones
export const savePost = async (post) => {
    if (!post.user_id) {
        throw new Error("El campo 'user_id' es obligatorio.");
    }

    // let fileURL = null;
    // if (file) {
    //     try {
    //         fileURL = await uploadFileToStorage(file);
    //         console.log("Archivo subido exitosamente, URL: ", fileURL);
    //     } catch (error) {
    //         console.error("Error al subir el archivo: ", error);
    //     }
    // } else {
    //     console.log("No se seleccionó ningún archivo.");
    // }

    return addDoc(collection(db, 'posts'), {
        user_id: post.user_id,
        email: post.email,
        content: post.content,
        displayName: post.displayName,
        photoURL: post.photoURL,
        // fileURL: fileURL,
        communityId: post.communityId || null, // Si no se proporciona, será null
        category: post.category || "general",
        title: post.title,
        cover: post.cover,
        created_at: serverTimestamp(),
    });
};

// Suscripción para obtener publicaciones en tiempo real
export function subscribeToPosts(callback) {
    const refPosts = collection(db, 'posts');
    const q = query(refPosts, orderBy('created_at', 'desc'));
    return onSnapshot(q, async (snapshot) => {
        const postsWithUpdates = await Promise.all(
            snapshot.docs.map(async (document) => {
                const postData = document.data();

                try {
                    if (!postData.user_id) {
                        console.warn(`La publicación con ID ${document.id} no tiene un 'user_id' definido.`);
                        return { id: document.id, ...postData };
                    }

                    const userDocRef = firestoreDoc(db, 'users', postData.user_id);
                    const userDoc = await getDoc(userDocRef);

                    if (userDoc.exists()) {
                        const userData = userDoc.data();
                        postData.photoURL = userData.photoURL || postData.photoURL;
                        postData.displayName = userData.displayName || postData.displayName;
                    }
                } catch (error) {
                    console.error(`Error al obtener datos del usuario para el post ${document.id}:`, error);
                }

                return { id: document.id, ...postData };
            })
        );

        callback(postsWithUpdates);
    });
}

// Función para guardar comentarios
export const saveComment = (postId, comment) => {
    if (!comment.user_id) {
        throw new Error("El campo 'user_id' es obligatorio en el comentario.");
    }

    return addDoc(collection(db, `posts/${postId}/comments`), {
        user_id: comment.user_id,
        email: comment.email,
        displayName: comment.displayName,
        content: comment.content,
        photoURL: comment.photoURL,
        created_at: serverTimestamp(),
    });
};

// Suscripción para obtener comentarios en tiempo real
export function subscribeToComments(postId, callback) {
    const refComments = collection(db, `posts/${postId}/comments`);
    const q = query(refComments, orderBy('created_at', 'desc'));
    return onSnapshot(q, async (snapshot) => {
        const commentsWithUpdates = await Promise.all(
            snapshot.docs.map(async (document) => {
                const commentData = document.data();

                try {
                    if (!commentData.user_id) {
                        console.warn(`El comentario con ID ${document.id} no tiene un 'user_id' definido.`);
                        return { id: document.id, ...commentData };
                    }

                    const userDocRef = firestoreDoc(db, 'users', commentData.user_id);
                    const userDoc = await getDoc(userDocRef);

                    if (userDoc.exists()) {
                        const userData = userDoc.data();
                        commentData.photoURL = userData.photoURL || commentData.photoURL;
                        commentData.displayName = userData.displayName || commentData.displayName;
                    }
                } catch (error) {
                    console.error(`Error al obtener datos del usuario para el comentario ${document.id}:`, error);
                }

                return { id: document.id, ...commentData };
            })
        );

        callback(commentsWithUpdates);
    });
}





















// Función unificada para togglear una reacción (like o dislike)
export const toggleReaction = async (postId, reaction, userId) => {
    const postRef = firestoreDoc(db, 'posts', postId);
    try {
      const postDoc = await getDoc(postRef);
      if (!postDoc.exists()) {
        console.error("El post no existe.");
        return;
      }
      const postData = postDoc.data();
      let likes = postData.likes || [];
      let dislikes = postData.dislikes || [];
      
      if (reaction === "like") {
        // Si ya dio dislike, lo quitamos
        if (dislikes.includes(userId)) {
          dislikes = dislikes.filter(id => id !== userId);
        }
        // Toggle like: si ya está en likes, lo eliminamos; si no, lo agregamos.
        if (likes.includes(userId)) {
          likes = likes.filter(id => id !== userId);
        } else {
          likes.push(userId);
        }
      } else if (reaction === "dislike") {
        // Si ya dio like, lo quitamos
        if (likes.includes(userId)) {
          likes = likes.filter(id => id !== userId);
        }
        // Toggle dislike: si ya está, lo eliminamos; si no, lo agregamos.
        if (dislikes.includes(userId)) {
          dislikes = dislikes.filter(id => id !== userId);
        } else {
          dislikes.push(userId);
        }
      }
      
      await updateDoc(postRef, { likes, dislikes });
      console.log("Reacción actualizada:", { likes, dislikes });
    } catch (error) {
      console.error("Error al actualizar la reacción:", error);
    }
  };
  
  export const getLikesAndDislikes = async (postId) => {
    const postRef = firestoreDoc(db, 'posts', postId);
    const postDoc = await getDoc(postRef);
    return postDoc.exists() ? postDoc.data() : null;
  };









  // Función para alternar reacción (like/dislike) en un comentario
export const toggleCommentReaction = async (postId, commentId, type, userId) => {
  const commentRef = firestoreDoc(db, `posts/${postId}/comments`, commentId);
  try {
    const commentDoc = await getDoc(commentRef);
    if (!commentDoc.exists()) {
      console.error('El comentario no existe.');
      return;
    }
    const commentData = commentDoc.data();
    let likes = commentData.likes || [];
    let dislikes = commentData.dislikes || [];

    if (type === "like") {
      // Si el usuario ya dio dislike, lo eliminamos
      if (dislikes.includes(userId)) {
        dislikes = dislikes.filter(id => id !== userId);
      }
      // Alterna el like
      if (likes.includes(userId)) {
        likes = likes.filter(id => id !== userId);
      } else {
        likes.push(userId);
      }
    } else if (type === "dislike") {
      // Si el usuario ya dio like, lo eliminamos
      if (likes.includes(userId)) {
        likes = likes.filter(id => id !== userId);
      }
      // Alterna el dislike
      if (dislikes.includes(userId)) {
        dislikes = dislikes.filter(id => id !== userId);
      } else {
        dislikes.push(userId);
      }
    }

    await updateDoc(commentRef, { likes, dislikes });
    console.log("Reacción en comentario actualizada correctamente!");
  } catch (error) {
    console.error("Error al actualizar la reacción del comentario:", error);
  }
};




















// categories.js
export const categoryStyles = {
  encuesta: { color: "#613b93", icon: "fa-poll" },
  arte: { color: "#bf3138", icon: "fa-paintbrush" },
  pregunta: { color: "#0d76bc", icon: "fa-question-circle" },
  guia: { color: "#ef6532", icon: "fa-book-open" },
  general: { color: "#464655", icon: "fa-comments" },
  social: { color: "#088c08", icon: "fa-users" }
};
